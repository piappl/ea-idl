module ext {

    @annotation exclusiveMaximum {
        any value;
    };

    @annotation exclusiveMinimum {
        any value;
    };

    @annotation maxItems {
        unsigned long value;
    };

    @annotation minItems {
        unsigned long value;
    };
    /**
        Regular expression to match.
    */
    @annotation pattern {
        string value;
    };
}; /* ext */
module core {
    module data {
        module types {
            @min(-40)
            @ext::exclusiveMaximum(100)
            typedef float TemperatureMeasurement;
        }; /* types */
        enum MeasurementTypeEnum {
            @value(1) MeasurementTypeEnum_TEMPERATURE_MEASUREMENT,
            @value(0) MeasurementTypeEnum_STRING
        };
        union Measurement;
    }; /* data */
    module message {
        /**
            ISO timestamp
        */
        typedef string Time;
        enum MessageTypeEnum {
            @value(0) MessageTypeEnum_MEASUREMENT,
            @value(1) MessageTypeEnum_EMPTY
        };
        typedef string OptionValue;
        struct MessageHeader;
        struct Message;

        struct DataMessage;
    }; /* message */
    module data {


        union Measurement switch (core::data::MeasurementTypeEnum) {
            case core::data::MeasurementTypeEnum_TEMPERATURE_MEASUREMENT:
                TemperatureMeasurement temperature_measurement;
            case core::data::MeasurementTypeEnum_STRING:
                string string;
        };
    }; /* data */
    module message {



        /**
            Message header
        */
        struct MessageHeader {
            @optional
            core::message::Time timestamp;
            @default(MessageTypeEnum_MEASUREMENT)
            core::message::MessageTypeEnum message_type;
        };
        struct Message {
            core::message::MessageHeader header;
        };

        struct DataMessage: core::message::Message {
            @ext::minItems(1)
            @ext::maxItems(5)
            sequence<core::data::Measurement, 5> body;
            /**
                This is a sequence
            */
            @optional
            sequence<long> test_comment_seq;
            /**
                This is optional
            */
            @optional
            boolean test_comment_optional;
            /**
                This is comment
            */
            double test_comment;
            map<string, core::message::OptionValue> extra;
        };
    }; /* message */
}; /* core */
