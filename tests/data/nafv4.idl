module ext {

    @annotation exclusiveMaximum {
        any value;
    };

    @annotation exclusiveMinimum {
        any value;
    };

    /**
        Regular expression to match.
    */
    @annotation pattern {
        string value;
    };
}; /* ext */

module core {
    /* ---------------------------------------------------------------------- */
    /* Declarations                                                           */
    /* ---------------------------------------------------------------------- */

    module data {

        module types {

            @min(-40)
            @ext::exclusiveMaximum(100)
            typedef float TemperatureMeasurement;
        }; /* types */
        union Measurement;
    }; /* data */

    module message {

        /**
            ISO timestamp
        */
        typedef string Time;
        enum MessageTypeEnum {
            MessageTypeEnum_MEASUREMENT,
            MessageTypeEnum_EMPTY
        };
        struct MessageHeader;
        struct Message;
        struct DataMessage;
    }; /* message */
    /* ---------------------------------------------------------------------- */
    /* Definitions                                                            */
    /* ---------------------------------------------------------------------- */

    module data {

        union Measurement switch (int8)  {
            case 1:
                core::data::types::TemperatureMeasurement a_temperature_measurement;
            case 2:
                string a_string;
        };
    }; /* data */

    module message {

        /**
            Message header
        */
        struct MessageHeader {
            @optional
            core::message::Time timestamp;

            core::message::MessageTypeEnum message_type;
        };


        struct Message {
            core::message::MessageHeader header;
        };


        struct DataMessage: core::message::Message {
            sequence<core::data::Measurement> body;

            /**
                This is a sequence
            */
            sequence<long> test_comment_seq;

            /**
                This is optional
            */
            @optional
            boolean test_comment_optional;

            /**
                This is comment
            */
            double test_comment;
        };

    }; /* message */
}; /* core */
