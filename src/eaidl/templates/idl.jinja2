{% macro gen_attribute(module, cls, attr) -%}
{% if attr.notes %}/** {{attr.notes | wordwrap(78) }} */ {% endif %}
{%- if attr.is_optional %}@optional {% endif %}
{% if attr.is_collection %}sequence<{{ "::".join(attr.namespace + [attr.type])}}> {{attr.name}};
{% else %}{{ "::".join(attr.namespace + [attr.type])}} {{attr.name}};
{% endif -%}
{%- endmacro -%}
{% macro gen_notes(cls) -%}
{% if cls.notes %}/**
    {{cls.notes | wordwrap(78) | indent(4)}}
*/ {% endif %}
{%- endmacro -%}
{% macro get_struct(module, cls) -%}
{% if cls.generalization %}
struct {{ cls.name }}: {{ "::".join(cls.generalization) }} {
{%- else %}
struct {{ cls.name }} {
{%- endif %}
{% for attr in cls.attributes -%}
{{ gen_attribute(module, cls, attr) | indent(4, True) }}{% endfor -%}
};
{% endmacro -%}
{% macro gen_class_declaration(module, cls) -%}
{%- if "idlEnum" in cls.stereotypes %}
enum {{ cls.name }} {
{% for item in cls.attributes %}{% if loop.revindex0 == 0 %}    {{item.name}}
{% else %}    {{item.name}},
{% endif -%}{% endfor -%}};
{%- elif "idlUnion" in cls.stereotypes %}
union {{ cls.name }};
{%- elif "idlTypedef" in cls.stereotypes %}
{% for key, value in cls.properties.items() %}@{{key}}({{value}})
{% endfor -%}
{{ gen_notes(cls) }}
typedef {{cls.parent_type}} {{cls.name}};
{%- elif "idlStruct" in cls.stereotypes %}
struct {{ cls.name }};
{%- endif -%}
{%- endmacro -%}
{% macro gen_class(module, cls) -%}
{%- if "idlUnion" in cls.stereotypes %}
{{ gen_notes(cls) }}
union {{ cls.name }} switch (int8)  {
{%- for item in cls.attributes %}
    case {{loop.index}}:
        {{ "::".join(item.namespace + [item.type])}} {{item.name}};{% endfor %}
};
{%- elif "idlStruct" in cls.stereotypes %}
{{ gen_notes(cls) }}
{{ get_struct(module, cls) }}
{%- endif -%}
{% endmacro %}
{%- macro gen_module_declaration(module, loop) %}
{{ gen_notes(module) }}
module {{ module.name }} {
{%- for submodule in module.packages -%}
{{ gen_module_declaration(submodule, loop)|indent(4, False) }}
{%- endfor -%}
{%- for cls in module.classes -%}
{{ gen_class_declaration(module, cls)|indent(4, False) }}
{%- endfor %}
}; /* {{module.name}} */
{%- endmacro -%}
{% macro gen_module(module, loop) %}
{%- if module.info.create_definition == True %}
{{ gen_notes(module) }}
module {{ module.name }} {
{%- for submodule in module.packages -%}
{{ gen_module(submodule, loop)|indent(4, False) }}
{%- endfor -%}
{%- for cls in module.classes -%}
{{ gen_class(module, cls)|indent(4, False) }}
{%- endfor %}
}; /* {{module.name}} */
{%- endif %}
{%- endmacro -%}

module ext {
{%- for property_type in package.property_types recursive %}
    {{ gen_notes(property_type) }}
    @annotation {{property_type.property}} {
        {% for type in property_type.property_types recursive %}{{type}}{% endfor %}
    };
{% endfor %}
}; /* ext */

module {{package.name}} {
    /* ---------------------------------------------------------------------- */
    /* Declarations                                                           */
    /* ---------------------------------------------------------------------- */
{%- for child in package.packages recursive -%}
{{ gen_module_declaration(child, loop)|indent(4, False) }}
{% endfor %}
    /* ---------------------------------------------------------------------- */
    /* Definitions                                                            */
    /* ---------------------------------------------------------------------- */
{%- for child in package.packages recursive -%}
{{ gen_module(child, loop)|indent(4, False) }}
{% endfor -%}
}; /* {{package.name}} */