{% macro gen_attribute(module, cls, attr) -%}
    {% if attr.is_collection %}    
        sequence<{{ "::".join(attr.namespace + [attr.type])}}> {{attr.name}};
    {% else %}
        {{ "::".join(attr.namespace + [attr.type])}} {{attr.name}};
    {% endif -%}
{% endmacro -%}
{% macro get_struct(module, cls) -%}
    struct {{ cls.name }} {
    {% for attr in cls.attributes -%}
    {{ gen_attribute(module, cls, attr) }}
    {% endfor -%}
    }
{% endmacro -%}
{% macro gen_class(module, cls) -%}
{% if "idlEnum" in cls.stereotypes %}
    enum {{ cls.name }} {
    {% for item in cls.attributes %}
        {{item.name}};{% endfor %}
}{% elif "idlUnion" in cls.stereotypes %}
    union {{ cls.name }} {
    {% for item in cls.attributes %}
        {{ "::".join(cls.namespace) ~ "::" ~ item.type}} {{item.name}};{% endfor %}
}{% elif "idlTypedef" in cls.stereotypes %}
    {# Do nothing here #}
{% else %}
    {{ get_struct(module, cls) }}
{%endif%}
{% endmacro -%}
{% macro gen_module(module, loop) %}
module {{ module.name }} {
{% for cls in module.classes %}
{{ gen_class(module, cls) }}
{% endfor %}

{% for submodule in module.packages %}
{{ gen_module(submodule, loop) }}
{% endfor %}

} /* {{module.name}} */
{% endmacro -%}



{{package.name}} {
{% for child in package.packages recursive -%}
{{ gen_module(child, loop)|indent(4, False) }}
{% endfor -%}
}